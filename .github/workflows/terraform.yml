name: Terraform
on:
  push:
    branches:
      - main
      - "**"
  pull_request:
    branches:
      - "**"
  workflow_dispatch:
    branches:
      - "**"

  
jobs:
  
  Build:
    
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4



  DeploySandbox:
    name: 'Deploy to Sandbox'
    if: startsWith( github.ref_name, 'feature' )
    needs: Build
    runs-on: ubuntu-latest
    environment: 
      name: sandbox
    defaults:
      run:
        working-directory: ${{ env.tf_actions_working_dir }}
        shell: bash

    steps:
    - name: Setup AWS CLI
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true
        token: ${{ secrets.GITHUB_TOKEN }}
    - uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1         

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init 
      run: terraform init 

    - name: Validate Terraform configuration
      run: terraform validate 
  
    
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false 

      # On push to "main", build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false 
  
  DeployStaging:
    name: 'Deploy to Staging'
    needs: Build
    runs-on: ubuntu-latest
    environment: 
      name: staging
    defaults:
      run:
        working-directory: ${{ env.tf_actions_working_dir }}
        shell: bash

    steps:
    - name: Setup AWS CLI
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true
        token: ${{ secrets.GITHUB_TOKEN }}
    - uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1         

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init 
      run: terraform init

    - name: Validate Terraform configuration
      run: terraform validate 
  
    
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false 

   # - name: Terraform Apply
    #  if: github.ref == 'refs/heads/"main"'
     # run: terraform apply -auto-approve -input=false 
  

  


  DeployProduction:
    name: 'Deploy to Production'
    needs: Build
    runs-on: ubuntu-latest
    environment: 
      name: production
    defaults:
      run:
        working-directory: ${{ env.tf_actions_working_dir }}
        shell: bash

    steps:
    - name: Setup AWS CLI
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true
        token: ${{ secrets.GITHUB_TOKEN }}
    - uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1         

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init 
      run: terraform init 

    - name: Validate Terraform configuration
      run: terraform validate 
  
    
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false 

    # On push to "main", approval will be required
    - id: list-maintainers
      if: github.ref == 'refs/heads/"main"'
      run: echo "maintainers='danny, ricky, bobby'" >> $GITHUB_ENV

    - uses: peternied/required-approval@v1.3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        min-required: 1
        required-approvers-list: ${{ steps.list-maintainers.outputs.maintainers }}  

      # On push to "main", build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      #if: github.ref == 'refs/heads/"main"'
      run: terraform apply -auto-approve -input=false 
      

      

  
